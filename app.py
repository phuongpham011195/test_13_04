import streamlit as st
import pandas as pd
import numpy as np
import pickle
from streamlit_option_menu import option_menu

st.markdown(
    """
    <style>
    [data-testid="stSidebar"] {
        background-color: #155263ff;
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.sidebar.markdown(
    """
    <h3 style="text-align: center; font-size: 17px; color: white; margin-bottom: 5px;">
        TR∆Ø·ªúNG ƒê·∫†I H·ªåC KHOA H·ªåC T·ª∞ NHI√äN<br>ƒêHQG-HCM
    </h3>
    """,
    unsafe_allow_html=True
)

import streamlit as st

st.sidebar.markdown(
    """
    <h3 style="text-align: center; font-size: 18px; color: orange;">
        ƒê·ªì √°n t·ªët nghi·ªáp Data Science<br>Project 1: Customer Segmentation
    </h3>
    """,
    unsafe_allow_html=True
)

with st.sidebar:
    page = option_menu(
        menu_title="Go to",  
        options=["Project Overview", "Manual Rule Based", "KMeans Model"],
        icons=["house", "bar-chart", "gear"],  
        default_index=0,
        styles={
            "container": {"background-color": "#ffc93cff"},
            "icon": {"color": "black", "font-size": "15px"}, 
            "nav-link": {"color": "black", "font-size": "15px", "text-align": "center"},
            "nav-link-selected": {"background-color": "#d2572eff", "color": "white", "font-size": "15px"},
        }
    )

st.sidebar.markdown(
    """
    <h3 style="text-align: center; font-size: 18px; color: white;">
        <br><br><br><br><br>Th√†nh vi√™n:<br><br>Ph·∫°m M·∫°ch Lam Ph∆∞∆°ng<br>Nguy·ªÖn Ph·∫°m Duy
    </h3>
    """,
    unsafe_allow_html=True
)

if page == "Project Overview":
    st.image("Grocieries.jpg")
    st.title("Project 1: Customer Segmentation")
    st.subheader("1. ƒê√¥i n√©t v·ªÅ Domain kinh doanh c·ªßa kh√°ch h√†ng:")
    st.text("- C·ª≠a h√†ng X ch·ªß y·∫øu b√°n c√°c s·∫£n ph·∫©m thi·∫øt y·∫øu cho kh√°ch h√†ng nh∆∞ rau, c·ªß, qu·∫£, th·ªãt, c√°, tr·ª©ng, s·ªØa, n∆∞·ªõc gi·∫£i kh√°t‚Ä¶")
    st.text("- Kh√°ch h√†ng c·ªßa c·ª≠a h√†ng l√† kh√°ch h√†ng mua l·∫ª.")
    st.subheader("2. Mong mu·ªën c·ªßa kh√°ch h√†ng:")
    st.text("- Ch·ªß c·ª≠a h√†ng X mong mu·ªën c√≥ th·ªÉ b√°n ƒë∆∞·ª£c nhi·ªÅu h√†ng h√≥a h∆°n c≈©ng nh∆∞ gi·ªõi thi·ªáu s·∫£n ph·∫©m ƒë·∫øn ƒë√∫ng ƒë·ªëi t∆∞·ª£ng kh√°ch h√†ng, chƒÉm s√≥c v√† l√†m h√†i l√≤ng kh√°ch h√†ng.")
    st.text("=> L√† m·ªôt nh√† ph√¢n t√≠ch d·ªØ li·ªáu, ta nghƒ© ƒë·∫øn b√†i to√°n ph√¢n c·ª•m kh√°ch h√†ng (Clustering - Customer Segmentation) ƒë·ªÉ ph√¢n c·ª•m v√† c√≥ c√≥ chi·∫øn l∆∞·ª£c kinh doanh ph√π h·ª£p ƒë·ªëi v·ªõi t·ª´ng c·ª•m kh√°ch h√†ng")
    st.image("cluster_analysis.png")
    st.subheader("3. C√°ch th·ª©c th·ª±c hi·ªán:")
    st.markdown("""
    **Th·ª≠ nghi·ªám x√¢y d·ª±ng v√† ƒë√°nh gi√° m√¥ h√¨nh ph√¢n t√≠ch kh√°ch h√†ng RFM b·∫±ng c√°c ph∆∞∆°ng ph√°p sau:**
    - Ph√¢n c·ª•m b·∫±ng thu·∫≠t to√°n K-Means s·ª≠ d·ª•ng Pyspark
    - Ph√¢n c·ª•m b·∫±ng t·∫≠p lu·∫≠t
    - Ph√¢n c·ª•m b·∫±ng thu·∫≠t to√°n K-Means v√† GMM b·∫±ng Python truy·ªÅn th·ªëng
    - So s√°nh c√°c m√¥ h√¨nh b·∫±ng c√°c ch·ªâ s·ªë nh∆∞ Silhouette Score, Davies-Bouldin Index
    """)
    st.image("method.png")
    st.subheader("4. ƒê√°nh gi√° v√† l·ª±a ch·ªçn thu·∫≠t to√°n:")
    st.markdown("""
    **Sau khi ph√¢n t√≠ch v√† ƒë√°nh gi√° d·ª±a tr√™n th·ªùi gian m√† model x·ª≠ l√Ω v√† Silhouette Score, ta quy·∫øt ƒë·ªãnh l·ª±a ch·ªçn 2 ph∆∞∆°ng ph√°p sau ƒë·ªÉ gi·∫£i quy·∫øt b√†i to√°n ph√¢n c·ª•m kh√°ch h√†ng:**
    """)

    st.markdown("""
    **Ph√¢n c·ª•m b·∫±ng t·∫≠p lu·∫≠t: Th·ªùi gian x·ª≠ l√Ω nhanh, ph√¢n c·ª•m r√µ r√†ng: Ph√¢n th√†nh 8 nh√≥m kh√°ch h√†ng, ph√π h·ª£p cho c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i, c√°c chi·∫øn l∆∞·ª£c kinh doanh c√≥ t√≠nh c√° nh√¢n h√≥a cao
    - üéØ 1. Marketing c√° nh√¢n h√≥a (Personalized Marketing)
    - üõç 2. ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m ph√π h·ª£p h∆°n (Product Recommendation)
    - ü§ù 3. ChƒÉm s√≥c kh√°ch h√†ng t·ªët h∆°n
    - üí∏ 4. T·ªëi ∆∞u chi ph√≠ v√† ngu·ªìn l·ª±c
    """)

    st.image("RFM_Segments.png")
    st.markdown("""
    **Ph√¢n c·ª•m b·∫±ng thu·∫≠t to√°n K-Means b·∫±ng Python truy·ªÅn th·ªëng: Th·ªùi gian x·ª≠ l√Ω nhanh, ph√¢n c·ª•m r√µ r√†ng: Ph√¢n th√†nh 4 nh√≥m kh√°ch h√†ng, chi·∫øn l∆∞·ª£c kinh doanh s·∫Ω mang t√≠nh t·ªïng th·ªÉ, d·ªÖ tri·ªÉn khai v√† qu·∫£n l√Ω h∆°n so v·ªõi ph√¢n c·ª•m chi ti·∫øt.
    - Tr√°nh t√¨nh tr·∫°ng overfitting
    - Ra quy·∫øt ƒë·ªãnh nhanh, ƒë∆°n gi·∫£n
    """)
    st.image("Unsupervised_Segments.png")


elif page == "KMeans Model":
    st.image("Grocieries.jpg")
    st.title("üîç Customer Segmentation by KMeans Model")
    # Open and read file to cosine_sim_new
    with open('kmeans_model.pkl', 'rb') as f:
        kmeans_model = pickle.load(f)
    
    # Giao di·ªán nh·∫≠p li·ªáu
    st.title("Ph√¢n nh√≥m kh√°ch h√†ng b·∫±ng RFM")
    st.subheader("H√£y nh·∫≠p th√¥ng tin kh√°ch h√†ng:")
    r = st.number_input("Recency (R)", min_value=0.0, step=1.0)
    f = st.number_input("Frequency (F)", min_value=0.0, step=1.0)
    m = st.number_input("Monetary (M)", min_value=0.0, step=1.0)

    def image_rule(result):
        if result == 0:
            return st.image("new_kmeans.png")
        elif result == 1:
            return st.image("inactive_kmeans.png")
        elif result == 2:
            return st.image("churn_kmeans.png")
        elif result == 3:
            return st.image("regular_kmeans.png")
        elif result == 4:
            return st.image("vip_kmeans.png")
        
    def type_customer(result):
        if result == 0:
            return "NEW"
        elif result == 1:
            return "INACTIVE"
        elif result == 2:
            return "CHURN"
        elif result == 3:
            return "REGULAR"
        elif result == 4:
            return "VIPS"

    if st.button("D·ª± ƒëo√°n nh√≥m"):
        # T·∫°o array RFM
        user_rfm = np.array([[r, f, m]])
        
        # D·ª± ƒëo√°n nh√≥m
        cluster = kmeans_model.predict(user_rfm)
        
        st.success(f"Kh√°ch h√†ng n√†y thu·ªôc nh√≥m: {type_customer(cluster[0])}")
        image_rule(cluster[0])
    
    st.subheader("H√£y ch·ªçn file csv c√≥ th√¥ng tin RFM c·ªßa kh√°ch h√†ng:")
    uploaded_file = st.file_uploader("T·∫£i file CSV l√™n", type=["csv"])

    if uploaded_file is not None:
    # ƒê·ªçc file CSV
        df = pd.read_csv(uploaded_file)

        for i in range(0, len(df)):
            user_rfm = np.array([[df.iloc[i, 1], df.iloc[i, 2], df.iloc[i, 3]]])
            cluster_file = kmeans_model.predict(user_rfm)
            st.success(f"Kh√°ch h√†ng {df.iloc[i, 0]} n√†y thu·ªôc nh√≥m: {type_customer(cluster_file[0])}")
            df.iloc[i,4] = type_customer(cluster_file[0])
            image_rule(cluster_file[0])

        st.download_button(
        label="üì• T·∫£i file CSV",
        data=df.to_csv(index=False),
        file_name="du_lieu.csv",
        mime="text/csv"
        )



elif page == "Manual Rule Based":
    st.image("Grocieries.jpg")
    st.title("üîç Customer Segmentation by Manual Rule Based")
    # with open('manual_rule_based.pkl', 'rb') as f:
    #     manual_rule_based = pickle.load(f)

    def image_rule(result):
        if result == 'VIPS':
            return st.image("vips_rule_based.png")
        elif result == 'REGULARS':
            return st.image("regular_rule_based.png")
        elif result == 'NEW':
            return st.image("new_rule_based.png")
        elif result == 'LOYAL':
            return st.image("loyalty_rule_based.png")
        elif result == 'INACTIVE':
            return st.image("inactive_rule_based.png")
        elif result == 'DORMANT':
            return st.image("dormat_rule_based.png")
        elif result == 'CHURN':
            return st.image("churn_rule_based.png")
        else:
            return st.image("active_rule_based.png")
    
    df_RFM = pd.read_csv('df_RFM.csv')
    r_labels = range(4, 0, -1)
    f_labels = range(1, 5)
    m_labels = range(1, 5)
    _, r_bins = pd.qcut(df_RFM['Recency'], q=4, labels=r_labels, retbins=True, duplicates='drop')
    _, f_bins = pd.qcut(df_RFM['Frequency'], q=4, labels=f_labels, retbins=True, duplicates='drop')
    _, m_bins = pd.qcut(df_RFM['Monetary'], q=4, labels=m_labels, retbins=True, duplicates='drop')

    def assign_rfm_labels(recency, frequency, monetary, r_bins, f_bins, m_bins):
        r_label = pd.cut([recency], bins=r_bins, labels=r_labels)[0]
        f_label = pd.cut([frequency], bins=f_bins, labels=f_labels)[0]
        m_label = pd.cut([monetary], bins=m_bins, labels=m_labels)[0]
        return int(r_label), int(f_label), int(m_label)

    # Giao di·ªán nh·∫≠p li·ªáu
    st.title("Ph√¢n nh√≥m kh√°ch h√†ng b·∫±ng RFM")
    st.subheader("H√£y nh·∫≠p th√¥ng tin kh√°ch h√†ng:")
    r = st.number_input("Recency (R)", min_value=0.0, step=1.0)
    f = st.number_input("Frequency (F)", min_value=0.0, step=1.0)
    m = st.number_input("Monetary (M)", min_value=0.0, step=1.0)

    if st.button("D·ª± ƒëo√°n nh√≥m"):
        # df_RFM = manual_rule_based['df_RFM']
        # r_bins = manual_rule_based['r_bins']
        # f_bins = manual_rule_based['f_bins']
        # m_bins = manual_rule_based['m_bins']
        # r_labels = manual_rule_based['r_labels']
        # f_labels = manual_rule_based['f_labels']
        # m_labels = manual_rule_based['m_labels']

        # # --- D·ªØ li·ªáu kh√°ch h√†ng m·ªõi ---
        # new_customer = {
        #     'Recency': r,
        #     'Frequency': f,
        #     'Monetary': m
        # }

        # # --- T√≠nh rank (so s√°nh v·ªõi d·ªØ li·ªáu g·ªëc) ---
        # r_rank = (df_RFM['Recency'] < new_customer['Recency']).sum() + 1
        # f_rank = (df_RFM['Frequency'] < new_customer['Frequency']).sum() + 1
        # m_rank = (df_RFM['Monetary'] < new_customer['Monetary']).sum() + 1

        # --- D·ª± ƒëo√°n R, F, M d·ª±a v√†o ph√¢n v·ªã ƒë√£ l∆∞u ---
        R, F, M = assign_rfm_labels(91, 27, 361.45, r_bins, f_bins, m_bins)
        # R = pd.cut([r_rank], bins=r_bins, labels=r_labels, include_lowest=True)[0]
        # F = pd.cut([f_rank], bins=f_bins, labels=f_labels, include_lowest=True)[0]
        # M = pd.cut([m_rank], bins=m_bins, labels=m_labels, include_lowest=True)[0]

        def a():
            if R + F + M == 12: # Kh√°ch h√†ng c√≥ s·ªë ƒëi·ªÉm t·ªëi ƒëa l√† kh√°ch h√†ng VIP
                return 'VIPS'
            elif R == 4 and F == 1: # Kh√°ch h√†ng c√≥ ng√†y mua h√†ng g·∫ßn nh·∫•t, t·ªïng s·ªë giao d·ªãch √≠t
                return 'NEW'
            elif R == 4 and F == 3 and M == 3: # Kh√°ch h√†ng th·ª±c hi·ªán giao d·ªãch g·∫ßn ƒë√¢y, c√≥ ph√°t sinh nhi·ªÅu giao d·ªãch, t·ªïng gi√° tr·ªã giao d·ªãch cao
                return 'LOYAL'
            elif R >= 3 and F == 4 and M == 4: # Kh√°ch h√†ng th·ª±c hi·ªán giao d·ªãch g·∫ßn ƒë√¢y, c√≥ ph√°t sinh nhi·ªÅu giao d·ªãch
                return 'ACTIVE'
            elif R == 1 and (R > 1 or M > 1): # Kh√°ch h√†ng ƒë√£ l√¢u kh√¥ng mua h√†ng v√† t·ªïng s·ªë ti·ªÅn mua h√†ng, t·ªïng s·ªë giao d·ªãch trung b√¨nh
                return 'DORMANT'
            elif R == 1 and R == 1 and M == 1: # Kh√°ch h√†ng ƒë√£ l√¢u kh√¥ng mua h√†ng v√† t·ªïng s·ªë ti·ªÅn mua h√†ng, t·ªïng s·ªë giao d·ªãch c≈©ng r·∫•t th·∫•p
                return 'CHURN'
            elif R == 2:
                return 'INACTIVE'
            else:
                return 'REGULARS'
        
        st.success(f"Kh√°ch h√†ng n√†y thu·ªôc nh√≥m: {a()}")
        image_rule(a())